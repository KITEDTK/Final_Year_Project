generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Clothes {
  id           String         @id @default(uuid())
  name         String
  categoryId   String
  brand        String
  location     String?
  createAt     DateTime       @default(now())
  updateAt     DateTime?
  isEnable     Boolean        @default(true)
  price        Int?
  initPrice    Int?
  clothDetails ClothDetails[]
  category     Categories     @relation(fields: [categoryId], references: [id])
  commets      Comments[]
}

model Sizes {
  id           String         @id @default(uuid())
  name         String
  createAt     DateTime       @default(now())
  updateAt     DateTime?
  isEnable     Boolean        @default(true)
  clothDetails ClothDetails[]
}

model Colors {
  id          String         @id @default(uuid())
  name        String
  createAt    DateTime       @default(now())
  updateAt    DateTime?
  isEnable    Boolean        @default(true)
  clothDetail ClothDetails[]
}

model Categories {
  id       String       @id @default(uuid())
  name     String
  parentId String?      @map("parent_id")
  createAt DateTime     @default(now())
  updateAt DateTime?
  isEnable Boolean      @default(true)
  parent   Categories?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Categories[] @relation("CategoryToCategory")
  Clothes  Clothes[]
}

model ClothDetails {
  id             String           @id @default(uuid())
  sizeId         String
  colorId        String
  codeBar        String?          @unique
  clothId        String
  amount         Int
  createAt       DateTime         @default(now())
  updateAt       DateTime?
  isEnable       Boolean          @default(true)
  image1         String?
  image2         String?
  image3         String?
  image4         String?
  carts          Carts[]
  cloth          Clothes          @relation(fields: [clothId], references: [id])
  color          Colors           @relation(fields: [colorId], references: [id])
  size           Sizes            @relation(fields: [sizeId], references: [id])
  paymentDetails PaymentDetails[]
  refunds        Refunds[]
  actionLogs     ActionLogs[]
  wardrobes      Wardrobe[]
}

model Users {
  id               String               @id @default(uuid())
  username         String?              @unique
  password         String?
  fullname         String?
  email            String?              @unique
  phoneNumber      String?
  point            Int?                 @default(0)
  verifyToken      String?
  expiredTokenTime DateTime?
  createAt         DateTime?            @default(now())
  updateAt         DateTime?
  isEnable         Boolean?             @default(true)
  buyerPayments    SecondhandPayments[] @relation("BuyerPayments")
  secondhandCarts  SecondHandCart[]
  carts            Carts[]
  comments         Comments[]
  payments         Payments[]
  refunds          Refunds[]
  permissions      UserPermissions[]
  vouchers         UserVouchers[]
  wardrobe         Wardrobe[]
}

model Permissions {
  id       String            @id @default(uuid())
  name     String
  createAt DateTime          @default(now())
  updateAt DateTime?
  isEnable Boolean           @default(true)
  users    UserPermissions[]
}

model UserPermissions {
  id           String      @id @default(uuid())
  userIds      String
  permissionId String
  createAt     DateTime    @default(now())
  updateAt     DateTime?
  isEnable     Boolean     @default(true)
  permissions  Permissions @relation(fields: [permissionId], references: [id])
  users        Users       @relation(fields: [userIds], references: [id])
}

model Vouchers {
  id       String         @id @default(uuid())
  code     String         @unique
  name     String
  minUsage Int
  discount Int
  createAt DateTime       @default(now())
  updateAt DateTime?
  isEnable Boolean        @default(true)
  payments Payments[]
  users    UserVouchers[]
}

model UserVouchers {
  id        String    @id @default(uuid())
  userId    String
  voucherId String
  createAt  DateTime  @default(now())
  updateAt  DateTime?
  isEnable  Boolean   @default(true)
  users     Users     @relation(fields: [userId], references: [id])
  vouchers  Vouchers  @relation(fields: [voucherId], references: [id])
}

model Payments {
  id             String           @id @default(uuid())
  userId         String?
  voucherId      String?
  total          Int
  fullname       String
  address        String
  phoneNumber    String
  email          String
  isPaid         Boolean          @default(false)
  vnpay          Boolean
  onlinePay      Boolean
  status         String?
  createAt       DateTime         @default(now())
  updateAt       DateTime?
  isEnable       Boolean          @default(true)
  paymentDetails PaymentDetails[]
  user           Users?           @relation(fields: [userId], references: [id])
  voucher        Vouchers?        @relation(fields: [voucherId], references: [id])
}

model PaymentDetails {
  id          String       @id @default(uuid())
  paymentId   String
  clothId     String
  createAt    DateTime     @default(now())
  updateAt    DateTime?
  amount      Int?
  isEnable    Boolean      @default(true)
  clothDetail ClothDetails @relation(fields: [clothId], references: [id])
  payment     Payments     @relation(fields: [paymentId], references: [id])
}

model Carts {
  id            String       @id @default(uuid())
  userId        String
  clothDetailId String
  isCheckout    Boolean      @default(false)
  amount        Int
  createAt      DateTime     @default(now())
  updateAt      DateTime?
  isEnable      Boolean      @default(true)
  clothDetails  ClothDetails @relation(fields: [clothDetailId], references: [id])
  users         Users        @relation(fields: [userId], references: [id])
}

model Comments {
  id       String     @id @default(uuid())
  userId   String
  content  String
  clothId  String
  parentId String?    @map("parent_id")
  createAt DateTime   @default(now())
  updateAt DateTime?
  isEnable Boolean    @default(true)
  cloth    Clothes    @relation(fields: [clothId], references: [id])
  parent   Comments?  @relation("CommentsToComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Comments[] @relation("CommentsToComments")
  user     Users      @relation(fields: [userId], references: [id])
}

model Refunds {
  id            String       @id @default(uuid())
  clothDetailId String
  userId        String
  barcode       String?
  total         Int
  createAt      DateTime     @default(now())
  updateAt      DateTime?
  isEnable      Boolean      @default(true)
  clotDetails   ClothDetails @relation(fields: [clothDetailId], references: [id])
  user          Users        @relation(fields: [userId], references: [id])
}

model CLothesAddExcelTest {
  id         String  @id @default(uuid())
  name       String?
  categoryId String?
  brand      String?
  location   String?
  price      Int?
}

model ActionLogs {
  id            String       @id @default(uuid())
  actionName    String
  clothDetailId String
  clothDetails  ClothDetails @relation(fields: [clothDetailId], references: [id])
  amount        Int
  createAt      DateTime     @default(now())
  updateAt      DateTime?
}

model SecondHand {
  id             String           @id @default(uuid())
  wardrobeId     String
  wardrobe       Wardrobe         @relation(fields: [wardrobeId], references: [id])
  secondHandCart SecondHandCart[]
  price          Int?
  amount         Int
  createAt       DateTime         @default(now())
  updateAt       DateTime?
}

model Wardrobe {
  id            String       @id @default(uuid())
  clothDetailId String
  clothDetails  ClothDetails @relation(fields: [clothDetailId], references: [id])
  userId        String
  users         Users        @relation(fields: [userId], references: [id])
  amount        Int
  createAt      DateTime     @default(now())
  updateAt      DateTime?
  secondHand    SecondHand[]
}

model SecondHandCart {
  id                  String              @id @default(uuid())
  userId              String
  users               Users               @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  secondHandId        String
  seconHands          SecondHand          @relation(fields: [secondHandId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  amount              Int
  secondhandPaymentId String?
  secondhandPayment   SecondhandPayments? @relation(fields: [secondhandPaymentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  createAt            DateTime            @default(now())
  updateAt            DateTime?
}

model SecondhandPayments {
  id              String           @id @default(uuid())
  buyerId         String?
  buyer           Users?           @relation("BuyerPayments", fields: [buyerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  buyerName       String
  address         String
  phoneNumer      String
  price           Int?
  secondhandCarts SecondHandCart[]
  status          String
}
